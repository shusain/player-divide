{"mappings":"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","sources":["<anon>","src/sketch/sketch.ts"],"sourcesContent":["var $b832fee0d356ae28$exports = {};\nlet $b832fee0d356ae28$var$players = [];\nlet $b832fee0d356ae28$var$leftSidePlayers = [];\nlet $b832fee0d356ae28$var$rightSidePlayers = [];\nlet $b832fee0d356ae28$var$disc;\nconst $b832fee0d356ae28$var$sketchFunction = (s)=>{\n    s.setup = ()=>{\n        let canvas = s.createCanvas(1024, 768);\n        canvas.parent(\"canvasContainer\");\n        $b832fee0d356ae28$var$disc = new $b832fee0d356ae28$var$Disc(s);\n        s.select(\"#accelerateButton\").mousePressed(()=>$b832fee0d356ae28$var$disc.accelerate());\n        s.select(\"#stopButton\").mousePressed(()=>$b832fee0d356ae28$var$disc.stop());\n        // Clear button click event\n        s.select(\"#clearWheel\").mousePressed(()=>{\n            $b832fee0d356ae28$var$players = [];\n            $b832fee0d356ae28$var$leftSidePlayers = [];\n            $b832fee0d356ae28$var$rightSidePlayers = [];\n            $b832fee0d356ae28$var$disc = new $b832fee0d356ae28$var$Disc(s);\n            s.select(\"#left-side-team\").html(`<div>Team 1</div>`);\n            s.select(\"#right-side-team\").html(`<div>Team 2</div>`);\n        });\n        function addNewPlayer() {\n            let playerName = s.select(\"#playerInput\").value();\n            if (playerName) {\n                if (typeof playerName === \"string\") {\n                    let newPlayers = playerName.split(\"\\n\").forEach((newPlayerName)=>{\n                        newPlayerName = newPlayerName.trim();\n                        if (newPlayerName !== \"\" && $b832fee0d356ae28$var$players.filter((playerName)=>{\n                            return playerName.toLowerCase() === newPlayerName.toLowerCase();\n                        }).length == 0) {\n                            $b832fee0d356ae28$var$players.push(newPlayerName);\n                            $b832fee0d356ae28$var$disc.addPlayer(newPlayerName);\n                        }\n                    });\n                }\n                s.select(\"#playerInput\").value(\"\");\n            }\n        }\n        $b832fee0d356ae28$var$players = [\n            \"Eric\",\n            \"Shaun\",\n            \"Jonathan\",\n            \"Kim\",\n            \"Justin\",\n            \"Nick\",\n            \"Emily\"\n        ];\n        $b832fee0d356ae28$var$players.forEach((player)=>$b832fee0d356ae28$var$disc.addPlayer(player));\n        document.getElementById(\"playerInput\").addEventListener(\"keyup\", (event)=>{\n            if (event.key == \"Enter\") addNewPlayer();\n        });\n        // Add player button click event\n        s.select(\"#addPlayer\").mousePressed(()=>{\n            addNewPlayer();\n        });\n    };\n    s.draw = ()=>{\n        s.background(200);\n        // draw rectangles for left and right halves\n        s.fill(0, 128, 0); // color for left half, adjust as needed\n        s.rect(0, 0, s.width / 2, s.height);\n        s.fill(128, 0, 128); // color for right half, adjust as needed\n        s.rect(s.width / 2, 0, s.width / 2, s.height);\n        $b832fee0d356ae28$var$disc.display();\n        $b832fee0d356ae28$var$disc.spin();\n    };\n};\nnew p5($b832fee0d356ae28$var$sketchFunction);\nclass $b832fee0d356ae28$var$Disc {\n    constructor(sketch, angle = 0, playerWedges = []){\n        this.sketch = sketch;\n        this.angle = angle;\n        this.playerWedges = playerWedges;\n        this.angleChange = 0.00;\n    }\n    addPlayer(name) {\n        this.playerWedges.push(new $b832fee0d356ae28$var$PlayerWedge(this.sketch, name, this.playerWedges.length, 2 * Math.PI / this.playerWedges.length));\n        this.playerWedges.forEach((wedge, index)=>{\n            wedge.setAngle(2 * Math.PI / this.playerWedges.length);\n        });\n    }\n    display() {\n        let s = this.sketch;\n        s.push();\n        s.translate(s.width / 2, s.height / 2);\n        s.rotate(this.angle);\n        this.playerWedges.forEach((wedge)=>{\n            wedge.display();\n        });\n        s.pop();\n    }\n    accelerate() {\n        this.angleChange += 0.02;\n        let spinSound = this.sketch.select(\"#spinSound\");\n        spinSound.currentTime = 0;\n        spinSound.play();\n    }\n    stop() {\n        this.playerWedges.forEach((wedge)=>wedge.flyOff(this.angleChange));\n        let spinSound = this.sketch.select(\"#spinSound\");\n        spinSound.pause();\n        let stopWheelSound = this.sketch.select(\"#stopWheelSound\");\n        stopWheelSound.play();\n        setTimeout(()=>{\n            this.dividePlayers();\n            this.displayPlayersList();\n        }, 100);\n        this.angleChange = 0;\n    }\n    spin() {\n        this.angle += this.angleChange;\n    }\n    displayPlayersList() {\n        let s = this.sketch;\n        // Display the player lists\n        s.fill(255);\n        s.text(\"Left side:\", 10, 10);\n        for(let i = 0; i < $b832fee0d356ae28$var$leftSidePlayers.length; i++){\n            s.text($b832fee0d356ae28$var$leftSidePlayers[i], 10, 30 + i * 20);\n            s.select(\"#left-side-team\").html(`<div>${$b832fee0d356ae28$var$leftSidePlayers[i]}</div>`, true);\n        }\n        s.text(\"Right side:\", s.width / 2 + 10, 10);\n        for(let i = 0; i < $b832fee0d356ae28$var$rightSidePlayers.length; i++){\n            s.text($b832fee0d356ae28$var$rightSidePlayers[i], s.width / 2 + 10, 30 + i * 20);\n            s.select(\"#right-side-team\").html(`<div>${$b832fee0d356ae28$var$rightSidePlayers[i]}</div>`, true);\n        }\n    }\n    dividePlayers() {\n        this.playerWedges.forEach((wedge)=>{\n            // Add discAngle to the wedge's angle\n            let angle = Math.atan2(wedge.velocity.y, wedge.velocity.x) + this.angle;\n            // Make sure the angle is between -PI and PI\n            angle = (angle + 3 * Math.PI) % (2 * Math.PI) - Math.PI;\n            if (angle > -Math.PI / 2 && angle < Math.PI / 2) $b832fee0d356ae28$var$rightSidePlayers.push(wedge.name);\n            else $b832fee0d356ae28$var$leftSidePlayers.push(wedge.name);\n        });\n    }\n}\nclass $b832fee0d356ae28$var$PlayerWedge {\n    constructor(sketch, name, index, angle){\n        this.sketch = sketch;\n        this.name = name;\n        this.index = index;\n        this.angle = angle;\n        this.color = this.sketch.color(this.sketch.random(255), this.sketch.random(255), this.sketch.random(255));\n        this.startAngle = this.index * this.angle; // The starting angle of each wedge should be the stopping angle of the previous one.\n        // Initialize position at the center of the canvas\n        this.position = this.sketch.createVector(0, 0);\n    }\n    flyOff(discSpeed) {\n        let direction = p5.Vector.fromAngle(this.startAngle + this.angle / 2);\n        this.velocity = direction.mult(discSpeed * 20);\n    }\n    update() {\n        if (this.velocity) // this.startAngle += this.velocity.mag();\n        this.velocity.mult(0.98);\n        // Update position according to velocity\n        if (this.velocity) this.position.add(this.velocity);\n    }\n    setAngle(angle) {\n        this.angle = angle;\n        this.startAngle = this.index * this.angle; // Update the starting angle as well whenever the angle changes.\n    }\n    display() {\n        const s = this.sketch;\n        s.angleMode(s.RADIANS);\n        s.fill(this.color);\n        // Translate to the current position of the wedge\n        s.push();\n        s.translate(this.position.x, this.position.y);\n        // Draw the wedge\n        s.arc(0, 0, 400, 400, this.startAngle, this.startAngle + this.angle, s.PIE);\n        // Rotate and draw the text\n        s.rotate(this.startAngle + this.angle / 2);\n        s.translate(100, 0); // Modify this value to adjust the distance of the text from the center of the wedge\n        s.textAlign(s.CENTER);\n        // calculate brightness\n        let brightness = s.red(this.color) * 0.299 + s.green(this.color) * 0.587 + s.blue(this.color) * 0.114;\n        if (brightness > 128) s.fill(0); // use black text for light colors\n        else s.fill(255); // use white text for dark colors\n        s.text(this.name, 0, 0);\n        s.pop();\n        this.update();\n    }\n}\n\n\n//# sourceMappingURL=index.b9b8a7ea.js.map\n","let players = [];\nlet leftSidePlayers = [];\nlet rightSidePlayers = [];\n\nlet disc;\n\n\nconst sketchFunction = (s: p5) => {\n\n\n  s.setup = () => {\n    let canvas = s.createCanvas(1024, 768);\n    canvas.parent('canvasContainer');\n\n    disc = new Disc(s);\n\n    s.select('#accelerateButton').mousePressed(() => disc.accelerate());\n    s.select('#stopButton').mousePressed(() => disc.stop());\n    // Clear button click event\n    s.select('#clearWheel').mousePressed(() => {\n      players = [];\n      leftSidePlayers = [];\n      rightSidePlayers = [];\n      disc = new Disc(s);\n      s.select('#left-side-team').html(`<div>Team 1</div>`)\n      s.select('#right-side-team').html(`<div>Team 2</div>`)\n    });\n\n    function addNewPlayer() {\n      let playerName = s.select('#playerInput').value();\n      if (playerName) {\n        if (typeof playerName === \"string\") {\n          let newPlayers = playerName.split(\"\\n\").forEach((newPlayerName) => {\n            newPlayerName = newPlayerName.trim()\n            if (newPlayerName !== \"\" && players.filter((playerName) => { return playerName.toLowerCase() === newPlayerName.toLowerCase() }).length == 0) {\n              players.push(newPlayerName);\n              disc.addPlayer(newPlayerName);\n            }\n          })\n        }\n        s.select('#playerInput').value('');\n      }\n\n\n    }\n    players = [\"Eric\", \"Shaun\", \"Jonathan\", \"Kim\", \"Justin\", \"Nick\", \"Emily\"]\n    players.forEach(player => disc.addPlayer(player));\n\n    document.getElementById(\"playerInput\").addEventListener(\"keyup\", (event) => {\n      if (event.key == \"Enter\")\n        addNewPlayer()\n    })\n\n    // Add player button click event\n    s.select('#addPlayer').mousePressed(() => {\n      addNewPlayer()\n    });\n  }\n\n  s.draw = () => {\n    s.background(200);\n\n    // draw rectangles for left and right halves\n    s.fill(0, 128, 0); // color for left half, adjust as needed\n    s.rect(0, 0, s.width / 2, s.height);\n    s.fill(128, 0, 128); // color for right half, adjust as needed\n    s.rect(s.width / 2, 0, s.width / 2, s.height);\n\n    disc.display();\n    disc.spin();\n  }\n}\n\nnew p5(sketchFunction)\n\n\nclass Disc {\n  private angleChange: number = 0.00; // Add this line\n  constructor(private sketch: p5, private angle: number = 0, private playerWedges = []) {\n  }\n\n  addPlayer(name: string) {\n    this.playerWedges.push(new PlayerWedge(this.sketch, name, this.playerWedges.length, (2 * Math.PI) / this.playerWedges.length));\n    this.playerWedges.forEach((wedge, index) => {\n      wedge.setAngle((2 * Math.PI) / this.playerWedges.length);\n    });\n  }\n\n  display() {\n    let s = this.sketch;\n    s.push();\n    s.translate(s.width / 2, s.height / 2);\n    s.rotate(this.angle);\n    this.playerWedges.forEach(wedge => {\n      wedge.display();\n    });\n    s.pop();\n  }\n\n  accelerate() {\n    this.angleChange += 0.02;\n    let spinSound = (this.sketch.select(\"#spinSound\") as unknown as HTMLAudioElement)\n    spinSound.currentTime=0;\n    spinSound.play()\n  }\n\n  stop() {\n    this.playerWedges.forEach(wedge => wedge.flyOff(this.angleChange));\n    \n    let spinSound = (this.sketch.select(\"#spinSound\") as unknown as HTMLAudioElement)\n    spinSound.pause();\n\n    let stopWheelSound = (this.sketch.select(\"#stopWheelSound\") as unknown as HTMLAudioElement)\n    stopWheelSound.play()\n    \n    setTimeout(() => {\n      this.dividePlayers();\n      this.displayPlayersList();\n    }, 100)\n    this.angleChange = 0;\n  }\n\n  spin() {\n    this.angle += this.angleChange;\n  }\n\n  displayPlayersList() {\n    let s = this.sketch;\n      // Display the player lists\n      s.fill(255);\n      s.text('Left side:', 10, 10);\n      for (let i = 0; i < leftSidePlayers.length; i++) {\n        s.text(leftSidePlayers[i], 10, 30 + i * 20);\n        s.select('#left-side-team').html(`<div>${leftSidePlayers[i]}</div>`, true)\n      }\n\n      s.text('Right side:', s.width / 2 + 10, 10);\n      for (let i = 0; i < rightSidePlayers.length; i++) {\n        s.text(rightSidePlayers[i], s.width / 2 + 10, 30 + i * 20);\n        s.select('#right-side-team').html(`<div>${rightSidePlayers[i]}</div>`, true)\n      }\n  }\n\n  dividePlayers() {\n    this.playerWedges.forEach(wedge => {\n      // Add discAngle to the wedge's angle\n      let angle = Math.atan2(wedge.velocity.y, wedge.velocity.x) + this.angle;\n\n      // Make sure the angle is between -PI and PI\n      angle = (angle + 3 * Math.PI) % (2 * Math.PI) - Math.PI;\n\n      if (angle > -Math.PI / 2 && angle < Math.PI / 2) {\n        rightSidePlayers.push(wedge.name);\n      } else {\n        leftSidePlayers.push(wedge.name);\n      }\n    });\n  }\n\n\n\n}\n\nclass PlayerWedge {\n  public position: p5.Vector;\n  public velocity: p5.Vector;\n  private color: p5.Color;\n  public startAngle: number;\n\n  constructor(private sketch: p5, public name: string, public index: number, public angle: number) {\n    this.color = this.sketch.color(this.sketch.random(255), this.sketch.random(255), this.sketch.random(255));\n    this.startAngle = this.index * this.angle;  // The starting angle of each wedge should be the stopping angle of the previous one.\n\n\n    // Initialize position at the center of the canvas\n    this.position = this.sketch.createVector(0, 0);\n  }\n\n  flyOff(discSpeed: number) {\n    let direction = p5.Vector.fromAngle(this.startAngle + this.angle / 2);\n    this.velocity = direction.mult(discSpeed * 20);\n  }\n\n  update() {\n    if (this.velocity) {\n      // this.startAngle += this.velocity.mag();\n      this.velocity.mult(1 - 0.02)\n    }\n\n    // Update position according to velocity\n    if (this.velocity) {\n      this.position.add(this.velocity);\n    }\n  }\n  setAngle(angle: number) {\n    this.angle = angle;\n    this.startAngle = this.index * this.angle;  // Update the starting angle as well whenever the angle changes.\n  }\n\n  display() {\n    const s = this.sketch;\n    s.angleMode(s.RADIANS);\n    s.fill(this.color);\n\n    // Translate to the current position of the wedge\n    s.push();\n    s.translate(this.position.x, this.position.y);\n\n    // Draw the wedge\n    s.arc(0, 0, 400, 400, this.startAngle, this.startAngle + this.angle, s.PIE);\n\n    // Rotate and draw the text\n    s.rotate(this.startAngle + this.angle / 2);\n    s.translate(100, 0); // Modify this value to adjust the distance of the text from the center of the wedge\n    s.textAlign(s.CENTER);\n\n    // calculate brightness\n    let brightness = s.red(this.color) * 0.299 + s.green(this.color) * 0.587 + s.blue(this.color) * 0.114;\n    if (brightness > 128) {  // brightness threshold, adjust as needed\n      s.fill(0);  // use black text for light colors\n    } else {\n      s.fill(255);  // use white text for dark colors\n    }\n    s.text(this.name, 0, 0);\n\n    s.pop();\n\n    this.update();\n  }\n\n}\n"],"names":["$b832fee0d356ae28$var$disc","$b832fee0d356ae28$var$players","$b832fee0d356ae28$var$leftSidePlayers","$b832fee0d356ae28$var$rightSidePlayers","p5","s","setup","addNewPlayer","playerName","select","value","split","forEach","newPlayerName","trim","filter","toLowerCase","length","push","addPlayer","canvas","createCanvas","parent","$b832fee0d356ae28$var$Disc","mousePressed","accelerate","stop","html","player","document","getElementById","addEventListener","event","key","draw","background","fill","rect","width","height","display","spin","constructor","sketch","angle","playerWedges","angleChange","name","$b832fee0d356ae28$var$PlayerWedge","Math","PI","wedge","index","setAngle","translate","rotate","pop","spinSound","currentTime","play","flyOff","pause","stopWheelSound","setTimeout","dividePlayers","displayPlayersList","text","i","atan2","velocity","y","x","color","random","startAngle","position","createVector","discSpeed","direction","Vector","fromAngle","mult","update","add","angleMode","RADIANS","arc","PIE","textAlign","CENTER","brightness","red","green","blue"],"version":3,"file":"index.b9b8a7ea.js.map"}