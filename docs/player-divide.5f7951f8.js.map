{"mappings":"ACAA,IAII,EAJA,EAAU,EAAE,CACZ,EAAkB,EAAE,CACpB,EAAmB,EAAE,CAuEzB,IAAI,GAlEmB,AAAC,IAGtB,EAAE,KAAK,CAAG,KAkBR,SAAS,IACP,IAAI,EAAa,EAAE,MAAM,CAAC,gBAAgB,KAAK,GAC3C,IACE,AAAsB,UAAtB,OAAO,GACQ,EAAW,KAAK,CAAC,MAAM,OAAO,CAAC,AAAC,IAEzB,KADtB,CAAA,EAAgB,EAAc,IAAI,EAAlC,GAC4B,AAA8G,GAA9G,EAAQ,MAAM,CAAC,AAAC,GAAwB,EAAW,WAAW,KAAO,EAAc,WAAW,IAAM,MAAM,GACpI,EAAQ,IAAI,CAAC,GACb,EAAK,SAAS,CAAC,GAEnB,GAEF,EAAE,MAAM,CAAC,gBAAgB,KAAK,CAAC,IAInC,CAhCA,AADa,EAAE,YAAY,CAAC,IAAK,KAC1B,MAAM,CAAC,mBAEd,EAAO,IAAI,EAAK,GAEhB,EAAE,MAAM,CAAC,qBAAqB,YAAY,CAAC,IAAM,EAAK,UAAU,IAChE,EAAE,MAAM,CAAC,eAAe,YAAY,CAAC,IAAM,EAAK,IAAI,IAEpD,EAAE,MAAM,CAAC,eAAe,YAAY,CAAC,KACnC,EAAU,EAAE,CACZ,EAAkB,EAAE,CACpB,EAAmB,EAAE,CACrB,EAAO,IAAI,EAAK,GAChB,EAAE,MAAM,CAAC,mBAAmB,IAAI,CAAC,qBACjC,EAAE,MAAM,CAAC,oBAAoB,IAAI,CAAC,oBACpC,GAoBA,AADA,CAAA,EAAU,CAAC,OAAQ,QAAS,WAAY,MAAO,SAAU,OAAQ,QAAS,MAAO,QAAQ,AAAA,EACjF,OAAO,CAAC,AAAA,GAAU,EAAK,SAAS,CAAC,IAEzC,SAAS,cAAc,CAAC,eAAe,gBAAgB,CAAC,QAAS,AAAC,IAC5D,AAAa,SAAb,EAAM,GAAG,EACX,GACJ,GAGA,EAAE,MAAM,CAAC,cAAc,YAAY,CAAC,KAClC,GACF,EACF,EAEA,EAAE,IAAI,CAAG,KACP,EAAE,UAAU,CAAC,KAGb,EAAE,IAAI,CAAC,EAAG,IAAK,GACf,EAAE,IAAI,CAAC,EAAG,EAAG,EAAE,KAAK,CAAG,EAAG,EAAE,MAAM,EAClC,EAAE,IAAI,CAAC,IAAK,EAAG,KACf,EAAE,IAAI,CAAC,EAAE,KAAK,CAAG,EAAG,EAAG,EAAE,KAAK,CAAG,EAAG,EAAE,MAAM,EAE5C,EAAK,OAAO,GACZ,EAAK,IAAI,EACX,CACF,EAKA,OAAM,EAEJ,YAAY,CAAkB,CAAU,EAAgB,CAAC,CAAE,EAAuB,EAAE,CAAE,CAAlE,IAAA,CAAA,MAAA,CAAA,EAAoB,IAAA,CAAA,KAAA,CAAA,EAA2B,IAAA,CAAA,YAAA,CAAA,EAD3D,IAAA,CAAA,WAAA,CAAsB,CAE9B,CAEA,UAAU,CAAY,CAAE,CACtB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAY,IAAI,CAAC,MAAM,CAAE,EAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAE,EAAK,KAAK,EAAE,CAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAC5H,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,EAAO,KAChC,EAAM,QAAQ,CAAC,EAAK,KAAK,EAAE,CAAI,IAAI,CAAC,YAAY,CAAC,MAAM,CACzD,EACF,CAEA,SAAU,CACR,IAAI,EAAI,IAAI,CAAC,MAAM,CACnB,EAAE,IAAI,GACN,EAAE,SAAS,CAAC,EAAE,KAAK,CAAG,EAAG,EAAE,MAAM,CAAG,GACpC,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,EACnB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,AAAA,IACxB,EAAM,OAAO,EACf,GACA,EAAE,GAAG,EACP,CAEA,YAAa,CACX,IAAI,CAAC,WAAW,EAAI,IACpB,IAAI,EAAa,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aACpC,CAAA,EAAU,WAAW,CAAC,EACtB,EAAU,IAAI,EAChB,CAEA,MAAO,CACL,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,AAAA,GAAS,EAAM,MAAM,CAAC,IAAI,CAAC,WAAW,GAGhE,AADiB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,cAC1B,KAAK,GAGf,AADsB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,mBAC1B,IAAI,GAEnB,WAAW,KACT,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,kBAAkB,EACzB,EAAG,KACH,IAAI,CAAC,WAAW,CAAG,CACrB,CAEA,MAAO,CACL,IAAI,CAAC,KAAK,EAAI,IAAI,CAAC,WAAW,AAChC,CAEA,oBAAqB,CACnB,IAAI,EAAI,IAAI,CAAC,MAAM,CAEjB,EAAE,IAAI,CAAC,KACP,EAAE,IAAI,CAAC,aAAc,GAAI,IACzB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAgB,MAAM,CAAE,IAC1C,EAAE,IAAI,CAAC,CAAe,CAAC,EAAE,CAAE,GAAI,GAAK,AAAI,GAAJ,GACpC,EAAE,MAAM,CAAC,mBAAmB,IAAI,CAAC,CAAC,KAAK,EAAE,CAAe,CAAC,EAAE,CAAC,MAAM,CAAC,CAAE,CAAA,GAGvE,EAAE,IAAI,CAAC,cAAe,EAAE,KAAK,CAAG,EAAI,GAAI,IACxC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAiB,MAAM,CAAE,IAC3C,EAAE,IAAI,CAAC,CAAgB,CAAC,EAAE,CAAE,EAAE,KAAK,CAAG,EAAI,GAAI,GAAK,AAAI,GAAJ,GACnD,EAAE,MAAM,CAAC,oBAAoB,IAAI,CAAC,CAAC,KAAK,EAAE,CAAgB,CAAC,EAAE,CAAC,MAAM,CAAC,CAAE,CAAA,EAE7E,CAEA,eAAgB,CACd,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,AAAA,IAExB,IAAI,EAAQ,KAAK,KAAK,CAAC,EAAM,QAAQ,CAAC,CAAC,CAAE,EAAM,QAAQ,CAAC,CAAC,EAAI,IAAI,CAAC,KAAK,AAKnE,CAFJ,CAAA,EAAS,AAAA,CAAA,EAAQ,EAAI,KAAK,EAAE,AAAF,EAAO,CAAA,EAAI,KAAK,EAAC,AAAD,EAAM,KAAK,EAAE,AAAF,EAEzC,CAAC,KAAK,EAAE,CAAG,GAAK,EAAQ,KAAK,EAAE,CAAG,EAC5C,EAAiB,IAAI,CAAC,EAAM,IAAI,EAEhC,EAAgB,IAAI,CAAC,EAAM,IAAI,CAEnC,EACF,CAIF,CAEA,MAAM,EAMJ,YAAY,CAAkB,CAAS,CAAY,CAAE,CAAoB,CAAS,CAAa,CAAE,CAA7E,IAAA,CAAA,MAAA,CAAA,EAAmB,IAAA,CAAA,IAAA,CAAA,EAAqB,IAAA,CAAA,KAAA,CAAA,EAAsB,IAAA,CAAA,KAAA,CAAA,EAChF,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MACpG,IAAI,CAAC,UAAU,CAAG,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,CAIzC,IAAI,CAAC,QAAQ,CAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAG,EAC9C,CAEA,OAAO,CAAiB,CAAE,CACxB,IAAI,EAAY,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAG,IAAI,CAAC,KAAK,CAAG,EACnE,CAAA,IAAI,CAAC,QAAQ,CAAG,EAAU,IAAI,CAAC,AAAY,GAAZ,EACjC,CAEA,QAAS,CACH,IAAI,CAAC,QAAQ,EAEf,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAIjB,IAAI,CAAC,QAAQ,EACf,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAEnC,CACA,SAAS,CAAa,CAAE,CACtB,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,UAAU,CAAG,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,AAC3C,CAEA,SAAU,CACR,IAAM,EAAI,IAAI,CAAC,MAAM,CACrB,EAAE,SAAS,CAAC,EAAE,OAAO,EACrB,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAGjB,EAAE,IAAI,GACN,EAAE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAG5C,EAAE,GAAG,CAAC,EAAG,EAAG,IAAK,IAAK,IAAI,CAAC,UAAU,CAAE,IAAI,CAAC,UAAU,CAAG,IAAI,CAAC,KAAK,CAAE,EAAE,GAAG,EAG1E,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAG,IAAI,CAAC,KAAK,CAAG,GACxC,EAAE,SAAS,CAAC,IAAK,GACjB,EAAE,SAAS,CAAC,EAAE,MAAM,EAIhB,AADiC,KAApB,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,EAAY,AAAsB,KAAtB,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,EAAY,AAAqB,KAArB,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAC3E,IACf,EAAE,IAAI,CAAC,GAEP,EAAE,IAAI,CAAC,KAET,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,EAAG,GAErB,EAAE,GAAG,GAEL,IAAI,CAAC,MAAM,EACb,CAEF","sources":["<anon>","src/sketch/sketch.ts"],"sourcesContent":["var $b832fee0d356ae28$exports = {};\nlet $b832fee0d356ae28$var$players = [];\nlet $b832fee0d356ae28$var$leftSidePlayers = [];\nlet $b832fee0d356ae28$var$rightSidePlayers = [];\nlet $b832fee0d356ae28$var$disc;\nconst $b832fee0d356ae28$var$sketchFunction = (s)=>{\n    s.setup = ()=>{\n        let canvas = s.createCanvas(768, 768);\n        canvas.parent('canvasContainer');\n        $b832fee0d356ae28$var$disc = new $b832fee0d356ae28$var$Disc(s);\n        s.select('#accelerateButton').mousePressed(()=>$b832fee0d356ae28$var$disc.accelerate());\n        s.select('#stopButton').mousePressed(()=>$b832fee0d356ae28$var$disc.stop());\n        // Clear button click event\n        s.select('#clearWheel').mousePressed(()=>{\n            $b832fee0d356ae28$var$players = [];\n            $b832fee0d356ae28$var$leftSidePlayers = [];\n            $b832fee0d356ae28$var$rightSidePlayers = [];\n            $b832fee0d356ae28$var$disc = new $b832fee0d356ae28$var$Disc(s);\n            s.select('#left-side-team').html(`<div>Team 1</div>`);\n            s.select('#right-side-team').html(`<div>Team 2</div>`);\n        });\n        function addNewPlayer() {\n            let playerName = s.select('#playerInput').value();\n            if (playerName) {\n                if (typeof playerName === \"string\") {\n                    let newPlayers = playerName.split(\"\\n\").forEach((newPlayerName)=>{\n                        newPlayerName = newPlayerName.trim();\n                        if (newPlayerName !== \"\" && $b832fee0d356ae28$var$players.filter((playerName)=>{\n                            return playerName.toLowerCase() === newPlayerName.toLowerCase();\n                        }).length == 0) {\n                            $b832fee0d356ae28$var$players.push(newPlayerName);\n                            $b832fee0d356ae28$var$disc.addPlayer(newPlayerName);\n                        }\n                    });\n                }\n                s.select('#playerInput').value('');\n            }\n        }\n        $b832fee0d356ae28$var$players = [\n            \"Eric\",\n            \"Shaun\",\n            \"Jonathan\",\n            \"Kim\",\n            \"Justin\",\n            \"Nick\",\n            \"Emily\",\n            \"Bob\",\n            \"Frank\"\n        ];\n        $b832fee0d356ae28$var$players.forEach((player)=>$b832fee0d356ae28$var$disc.addPlayer(player));\n        document.getElementById(\"playerInput\").addEventListener(\"keyup\", (event)=>{\n            if (event.key == \"Enter\") addNewPlayer();\n        });\n        // Add player button click event\n        s.select('#addPlayer').mousePressed(()=>{\n            addNewPlayer();\n        });\n    };\n    s.draw = ()=>{\n        s.background(200);\n        // draw rectangles for left and right halves\n        s.fill(0, 128, 0); // color for left half, adjust as needed\n        s.rect(0, 0, s.width / 2, s.height);\n        s.fill(128, 0, 128); // color for right half, adjust as needed\n        s.rect(s.width / 2, 0, s.width / 2, s.height);\n        $b832fee0d356ae28$var$disc.display();\n        $b832fee0d356ae28$var$disc.spin();\n    };\n};\nnew p5($b832fee0d356ae28$var$sketchFunction);\nclass $b832fee0d356ae28$var$Disc {\n    constructor(sketch, angle = 0, playerWedges = []){\n        this.sketch = sketch;\n        this.angle = angle;\n        this.playerWedges = playerWedges;\n        this.angleChange = 0.00;\n    }\n    addPlayer(name) {\n        this.playerWedges.push(new $b832fee0d356ae28$var$PlayerWedge(this.sketch, name, this.playerWedges.length, 2 * Math.PI / this.playerWedges.length));\n        this.playerWedges.forEach((wedge, index)=>{\n            wedge.setAngle(2 * Math.PI / this.playerWedges.length);\n        });\n    }\n    display() {\n        let s = this.sketch;\n        s.push();\n        s.translate(s.width / 2, s.height / 2);\n        s.rotate(this.angle);\n        this.playerWedges.forEach((wedge)=>{\n            wedge.display();\n        });\n        s.pop();\n    }\n    accelerate() {\n        this.angleChange += 0.02;\n        let spinSound = this.sketch.select(\"#spinSound\");\n        spinSound.currentTime = 0;\n        spinSound.play();\n    }\n    stop() {\n        this.playerWedges.forEach((wedge)=>wedge.flyOff(this.angleChange));\n        let spinSound = this.sketch.select(\"#spinSound\");\n        spinSound.pause();\n        let stopWheelSound = this.sketch.select(\"#stopWheelSound\");\n        stopWheelSound.play();\n        setTimeout(()=>{\n            this.dividePlayers();\n            this.displayPlayersList();\n        }, 100);\n        this.angleChange = 0;\n    }\n    spin() {\n        this.angle += this.angleChange;\n    }\n    displayPlayersList() {\n        let s = this.sketch;\n        // Display the player lists\n        s.fill(255);\n        s.text('Left side:', 10, 10);\n        for(let i = 0; i < $b832fee0d356ae28$var$leftSidePlayers.length; i++){\n            s.text($b832fee0d356ae28$var$leftSidePlayers[i], 10, 30 + i * 20);\n            s.select('#left-side-team').html(`<div>${$b832fee0d356ae28$var$leftSidePlayers[i]}</div>`, true);\n        }\n        s.text('Right side:', s.width / 2 + 10, 10);\n        for(let i = 0; i < $b832fee0d356ae28$var$rightSidePlayers.length; i++){\n            s.text($b832fee0d356ae28$var$rightSidePlayers[i], s.width / 2 + 10, 30 + i * 20);\n            s.select('#right-side-team').html(`<div>${$b832fee0d356ae28$var$rightSidePlayers[i]}</div>`, true);\n        }\n    }\n    dividePlayers() {\n        this.playerWedges.forEach((wedge)=>{\n            // Add discAngle to the wedge's angle\n            let angle = Math.atan2(wedge.velocity.y, wedge.velocity.x) + this.angle;\n            // Make sure the angle is between -PI and PI\n            angle = (angle + 3 * Math.PI) % (2 * Math.PI) - Math.PI;\n            if (angle > -Math.PI / 2 && angle < Math.PI / 2) $b832fee0d356ae28$var$rightSidePlayers.push(wedge.name);\n            else $b832fee0d356ae28$var$leftSidePlayers.push(wedge.name);\n        });\n    }\n}\nclass $b832fee0d356ae28$var$PlayerWedge {\n    constructor(sketch, name, index, angle){\n        this.sketch = sketch;\n        this.name = name;\n        this.index = index;\n        this.angle = angle;\n        this.color = this.sketch.color(this.sketch.random(255), this.sketch.random(255), this.sketch.random(255));\n        this.startAngle = this.index * this.angle; // The starting angle of each wedge should be the stopping angle of the previous one.\n        // Initialize position at the center of the canvas\n        this.position = this.sketch.createVector(0, 0);\n    }\n    flyOff(discSpeed) {\n        let direction = p5.Vector.fromAngle(this.startAngle + this.angle / 2);\n        this.velocity = direction.mult(discSpeed * 20);\n    }\n    update() {\n        if (this.velocity) // this.startAngle += this.velocity.mag();\n        this.velocity.mult(0.98);\n        // Update position according to velocity\n        if (this.velocity) this.position.add(this.velocity);\n    }\n    setAngle(angle) {\n        this.angle = angle;\n        this.startAngle = this.index * this.angle; // Update the starting angle as well whenever the angle changes.\n    }\n    display() {\n        const s = this.sketch;\n        s.angleMode(s.RADIANS);\n        s.fill(this.color);\n        // Translate to the current position of the wedge\n        s.push();\n        s.translate(this.position.x, this.position.y);\n        // Draw the wedge\n        s.arc(0, 0, 400, 400, this.startAngle, this.startAngle + this.angle, s.PIE);\n        // Rotate and draw the text\n        s.rotate(this.startAngle + this.angle / 2);\n        s.translate(100, 7); // Modify this value to adjust the distance of the text from the center of the wedge\n        s.textAlign(s.CENTER);\n        // calculate brightness\n        let brightness = s.red(this.color) * 0.299 + s.green(this.color) * 0.587 + s.blue(this.color) * 0.114;\n        if (brightness > 128) s.fill(0); // use black text for light colors\n        else s.fill(255); // use white text for dark colors\n        s.text(this.name, 0, 0);\n        s.pop();\n        this.update();\n    }\n}\n\n\n//# sourceMappingURL=player-divide.5f7951f8.js.map\n","let players = [];\r\nlet leftSidePlayers = [];\r\nlet rightSidePlayers = [];\r\n\r\nlet disc;\r\n\r\n\r\nconst sketchFunction = (s: p5) => {\r\n\r\n\r\n  s.setup = () => {\r\n    let canvas = s.createCanvas(768, 768);\r\n    canvas.parent('canvasContainer');\r\n\r\n    disc = new Disc(s);\r\n\r\n    s.select('#accelerateButton').mousePressed(() => disc.accelerate());\r\n    s.select('#stopButton').mousePressed(() => disc.stop());\r\n    // Clear button click event\r\n    s.select('#clearWheel').mousePressed(() => {\r\n      players = [];\r\n      leftSidePlayers = [];\r\n      rightSidePlayers = [];\r\n      disc = new Disc(s);\r\n      s.select('#left-side-team').html(`<div>Team 1</div>`)\r\n      s.select('#right-side-team').html(`<div>Team 2</div>`)\r\n    });\r\n\r\n    function addNewPlayer() {\r\n      let playerName = s.select('#playerInput').value();\r\n      if (playerName) {\r\n        if (typeof playerName === \"string\") {\r\n          let newPlayers = playerName.split(\"\\n\").forEach((newPlayerName) => {\r\n            newPlayerName = newPlayerName.trim()\r\n            if (newPlayerName !== \"\" && players.filter((playerName) => { return playerName.toLowerCase() === newPlayerName.toLowerCase() }).length == 0) {\r\n              players.push(newPlayerName);\r\n              disc.addPlayer(newPlayerName);\r\n            }\r\n          })\r\n        }\r\n        s.select('#playerInput').value('');\r\n      }\r\n\r\n\r\n    }\r\n    players = [\"Eric\", \"Shaun\", \"Jonathan\", \"Kim\", \"Justin\", \"Nick\", \"Emily\", \"Bob\", \"Frank\"]\r\n    players.forEach(player => disc.addPlayer(player));\r\n\r\n    document.getElementById(\"playerInput\").addEventListener(\"keyup\", (event) => {\r\n      if (event.key == \"Enter\")\r\n        addNewPlayer()\r\n    })\r\n\r\n    // Add player button click event\r\n    s.select('#addPlayer').mousePressed(() => {\r\n      addNewPlayer()\r\n    });\r\n  }\r\n\r\n  s.draw = () => {\r\n    s.background(200);\r\n\r\n    // draw rectangles for left and right halves\r\n    s.fill(0, 128, 0); // color for left half, adjust as needed\r\n    s.rect(0, 0, s.width / 2, s.height);\r\n    s.fill(128, 0, 128); // color for right half, adjust as needed\r\n    s.rect(s.width / 2, 0, s.width / 2, s.height);\r\n\r\n    disc.display();\r\n    disc.spin();\r\n  }\r\n}\r\n\r\nnew p5(sketchFunction)\r\n\r\n\r\nclass Disc {\r\n  private angleChange: number = 0.00; // Add this line\r\n  constructor(private sketch: p5, private angle: number = 0, private playerWedges = []) {\r\n  }\r\n\r\n  addPlayer(name: string) {\r\n    this.playerWedges.push(new PlayerWedge(this.sketch, name, this.playerWedges.length, (2 * Math.PI) / this.playerWedges.length));\r\n    this.playerWedges.forEach((wedge, index) => {\r\n      wedge.setAngle((2 * Math.PI) / this.playerWedges.length);\r\n    });\r\n  }\r\n\r\n  display() {\r\n    let s = this.sketch;\r\n    s.push();\r\n    s.translate(s.width / 2, s.height / 2);\r\n    s.rotate(this.angle);\r\n    this.playerWedges.forEach(wedge => {\r\n      wedge.display();\r\n    });\r\n    s.pop();\r\n  }\r\n\r\n  accelerate() {\r\n    this.angleChange += 0.02;\r\n    let spinSound = (this.sketch.select(\"#spinSound\") as unknown as HTMLAudioElement)\r\n    spinSound.currentTime=0;\r\n    spinSound.play()\r\n  }\r\n\r\n  stop() {\r\n    this.playerWedges.forEach(wedge => wedge.flyOff(this.angleChange));\r\n    \r\n    let spinSound = (this.sketch.select(\"#spinSound\") as unknown as HTMLAudioElement)\r\n    spinSound.pause();\r\n\r\n    let stopWheelSound = (this.sketch.select(\"#stopWheelSound\") as unknown as HTMLAudioElement)\r\n    stopWheelSound.play()\r\n    \r\n    setTimeout(() => {\r\n      this.dividePlayers();\r\n      this.displayPlayersList();\r\n    }, 100)\r\n    this.angleChange = 0;\r\n  }\r\n\r\n  spin() {\r\n    this.angle += this.angleChange;\r\n  }\r\n\r\n  displayPlayersList() {\r\n    let s = this.sketch;\r\n      // Display the player lists\r\n      s.fill(255);\r\n      s.text('Left side:', 10, 10);\r\n      for (let i = 0; i < leftSidePlayers.length; i++) {\r\n        s.text(leftSidePlayers[i], 10, 30 + i * 20);\r\n        s.select('#left-side-team').html(`<div>${leftSidePlayers[i]}</div>`, true)\r\n      }\r\n\r\n      s.text('Right side:', s.width / 2 + 10, 10);\r\n      for (let i = 0; i < rightSidePlayers.length; i++) {\r\n        s.text(rightSidePlayers[i], s.width / 2 + 10, 30 + i * 20);\r\n        s.select('#right-side-team').html(`<div>${rightSidePlayers[i]}</div>`, true)\r\n      }\r\n  }\r\n\r\n  dividePlayers() {\r\n    this.playerWedges.forEach(wedge => {\r\n      // Add discAngle to the wedge's angle\r\n      let angle = Math.atan2(wedge.velocity.y, wedge.velocity.x) + this.angle;\r\n\r\n      // Make sure the angle is between -PI and PI\r\n      angle = (angle + 3 * Math.PI) % (2 * Math.PI) - Math.PI;\r\n\r\n      if (angle > -Math.PI / 2 && angle < Math.PI / 2) {\r\n        rightSidePlayers.push(wedge.name);\r\n      } else {\r\n        leftSidePlayers.push(wedge.name);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nclass PlayerWedge {\r\n  public position: p5.Vector;\r\n  public velocity: p5.Vector;\r\n  private color: p5.Color;\r\n  public startAngle: number;\r\n\r\n  constructor(private sketch: p5, public name: string, public index: number, public angle: number) {\r\n    this.color = this.sketch.color(this.sketch.random(255), this.sketch.random(255), this.sketch.random(255));\r\n    this.startAngle = this.index * this.angle;  // The starting angle of each wedge should be the stopping angle of the previous one.\r\n\r\n\r\n    // Initialize position at the center of the canvas\r\n    this.position = this.sketch.createVector(0, 0);\r\n  }\r\n\r\n  flyOff(discSpeed: number) {\r\n    let direction = p5.Vector.fromAngle(this.startAngle + this.angle / 2);\r\n    this.velocity = direction.mult(discSpeed * 20);\r\n  }\r\n\r\n  update() {\r\n    if (this.velocity) {\r\n      // this.startAngle += this.velocity.mag();\r\n      this.velocity.mult(1 - 0.02)\r\n    }\r\n\r\n    // Update position according to velocity\r\n    if (this.velocity) {\r\n      this.position.add(this.velocity);\r\n    }\r\n  }\r\n  setAngle(angle: number) {\r\n    this.angle = angle;\r\n    this.startAngle = this.index * this.angle;  // Update the starting angle as well whenever the angle changes.\r\n  }\r\n\r\n  display() {\r\n    const s = this.sketch;\r\n    s.angleMode(s.RADIANS);\r\n    s.fill(this.color);\r\n\r\n    // Translate to the current position of the wedge\r\n    s.push();\r\n    s.translate(this.position.x, this.position.y);\r\n\r\n    // Draw the wedge\r\n    s.arc(0, 0, 400, 400, this.startAngle, this.startAngle + this.angle, s.PIE);\r\n\r\n    // Rotate and draw the text\r\n    s.rotate(this.startAngle + this.angle / 2);\r\n    s.translate(100, 7); // Modify this value to adjust the distance of the text from the center of the wedge\r\n    s.textAlign(s.CENTER);\r\n\r\n    // calculate brightness\r\n    let brightness = s.red(this.color) * 0.299 + s.green(this.color) * 0.587 + s.blue(this.color) * 0.114;\r\n    if (brightness > 128) {  // brightness threshold, adjust as needed\r\n      s.fill(0);  // use black text for light colors\r\n    } else {\r\n      s.fill(255);  // use white text for dark colors\r\n    }\r\n    s.text(this.name, 0, 0);\r\n\r\n    s.pop();\r\n\r\n    this.update();\r\n  }\r\n\r\n}\r\n"],"names":["$b832fee0d356ae28$var$disc","$b832fee0d356ae28$var$players","$b832fee0d356ae28$var$leftSidePlayers","$b832fee0d356ae28$var$rightSidePlayers","p5","s","setup","addNewPlayer","playerName","select","value","split","forEach","newPlayerName","trim","filter","toLowerCase","length","push","addPlayer","canvas","createCanvas","parent","$b832fee0d356ae28$var$Disc","mousePressed","accelerate","stop","html","player","document","getElementById","addEventListener","event","key","draw","background","fill","rect","width","height","display","spin","constructor","sketch","angle","playerWedges","angleChange","name","$b832fee0d356ae28$var$PlayerWedge","Math","PI","wedge","index","setAngle","translate","rotate","pop","spinSound","currentTime","play","flyOff","pause","stopWheelSound","setTimeout","dividePlayers","displayPlayersList","text","i","atan2","velocity","y","x","color","random","startAngle","position","createVector","discSpeed","direction","Vector","fromAngle","mult","update","add","angleMode","RADIANS","arc","PIE","textAlign","CENTER","brightness","red","green","blue"],"version":3,"file":"player-divide.5f7951f8.js.map"}